{"version":3,"sources":["../node_modules/@aws-amplify/ui-components/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","screens/Dashboard.js","App.js","serviceWorker.js","config/awsExports.js","index.js","logo.svg"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","Dashboard","useState","user","setUser","useEffect","a","Auth","currentAuthenticatedUser","userSesion","console","log","signInUserSession","idToken","jwtToken","getUserSession","className","src","logo","alt","username","href","target","rel","App","signedIn","setSignedIn","onAuthUIStateChange","authState","AuthState","SignedIn","SignedOut","usernameAlias","initialAuthState","SignIn","style","display","justifyContent","marginTop","headerText","slot","formFields","label","placeholder","required","type","Boolean","window","location","hostname","match","awsExports","aws_cognito_region","process","aws_user_pools_id","aws_user_pools_web_client_id","Amplify","configure","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e01511f.chunk.js","sourcesContent":["var map = {\n\t\"./amplify-amazon-button_5.entry.js\": [\n\t\t149,\n\t\t7\n\t],\n\t\"./amplify-auth-fields_9.entry.js\": [\n\t\t150,\n\t\t8\n\t],\n\t\"./amplify-authenticator.entry.js\": [\n\t\t151,\n\t\t9\n\t],\n\t\"./amplify-button_3.entry.js\": [\n\t\t152,\n\t\t10\n\t],\n\t\"./amplify-checkbox.entry.js\": [\n\t\t153,\n\t\t11\n\t],\n\t\"./amplify-confirm-sign-in_8.entry.js\": [\n\t\t154,\n\t\t12\n\t],\n\t\"./amplify-container.entry.js\": [\n\t\t155,\n\t\t13\n\t],\n\t\"./amplify-federated-buttons_2.entry.js\": [\n\t\t156,\n\t\t14\n\t],\n\t\"./amplify-federated-sign-in.entry.js\": [\n\t\t157,\n\t\t15\n\t],\n\t\"./amplify-form-field_4.entry.js\": [\n\t\t158,\n\t\t16\n\t],\n\t\"./amplify-greetings.entry.js\": [\n\t\t159,\n\t\t17\n\t],\n\t\"./amplify-icon-button.entry.js\": [\n\t\t160,\n\t\t18\n\t],\n\t\"./amplify-icon.entry.js\": [\n\t\t161,\n\t\t4\n\t],\n\t\"./amplify-link.entry.js\": [\n\t\t162,\n\t\t19\n\t],\n\t\"./amplify-nav_2.entry.js\": [\n\t\t163,\n\t\t20\n\t],\n\t\"./amplify-radio-button_2.entry.js\": [\n\t\t164,\n\t\t21\n\t],\n\t\"./amplify-select-mfa-type.entry.js\": [\n\t\t165,\n\t\t22\n\t],\n\t\"./amplify-sign-in-button.entry.js\": [\n\t\t166,\n\t\t5\n\t],\n\t\"./amplify-tooltip.entry.js\": [\n\t\t167,\n\t\t23\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 143;\nmodule.exports = webpackAsyncContext;","// Dashboard with user info and app's protected resources; Accessible is user authenticated\nimport React, { useState, useEffect } from \"react\";\nimport logo from \"../logo.svg\";\nimport { AmplifySignOut } from \"@aws-amplify/ui-react\";\nimport { Auth } from \"aws-amplify\";\n\nfunction Dashboard() {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    /**\n     * Fetch user session from storage and store in state\n     *\n     * @returns {void}\n     * @memberof Dashboard\n     */\n    async function getUserSession() {\n      try {\n        const userSesion = await Auth.currentAuthenticatedUser();\n\n        console.log(\"User session data\", userSesion);\n        console.log(\n          \"Cognito id token for authorizations\",\n          userSesion.signInUserSession.idToken.jwtToken\n        );\n        setUser(userSesion);\n      } catch (error) {\n        // Handle error, mostly fails in user authentication\n        console.log(error);\n      }\n    }\n    getUserSession();\n  }, []);\n\n  return (\n    <div className=\"Dashboard\">\n      <header className=\"Dashboard-header\">\n        <img src={logo} className=\"Dashboard-logo\" alt=\"logo\" />\n        {user && <h4>Hello {user.username}</h4>}\n\n        <p>This project demonstrates the usage of AWS Amplify in React</p>\n        <a\n          className=\"Dashboard-link\"\n          href=\"https://github.com/kcsuraj/aws-cognito-amplify.git\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Github Repo\n        </a>\n\n        <AmplifySignOut />\n      </header>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","// Application's Entry point; wraps protected component with AmplifyAutheticator\nimport React, { useState, useEffect } from \"react\";\nimport Dashboard from \"./screens/Dashboard\";\n\nimport {\n  AmplifyAuthenticator,\n  AmplifySignIn,\n  AmplifySignUp,\n  AmplifyForgotPassword,\n  AmplifyConfirmSignUp,\n} from \"@aws-amplify/ui-react\";\nimport { onAuthUIStateChange, AuthState } from \"@aws-amplify/ui-components\";\n\nfunction App() {\n  // Status to check user authentication flag\n  const [signedIn, setSignedIn] = useState(false);\n\n  useEffect(() => {\n    // Listen to auth state change and store authentication status flag\n    return onAuthUIStateChange((authState) => {\n      if (authState === AuthState.SignedIn) {\n        setSignedIn(true);\n      } else if (authState === AuthState.SignedOut) {\n        setSignedIn(false);\n      }\n    });\n  }, []);\n\n  return (\n    // initialAuthState accepts AuthState.SignIn or AuthState.SignUp and defaults to AuthState.SignIn\n    <AmplifyAuthenticator\n      usernameAlias=\"email\"\n      initialAuthState={AuthState.SignIn}\n      style={\n        signedIn\n          ? {}\n          : { display: \"flex\", justifyContent: \"center\", marginTop: 60 }\n      }\n    >\n      <AmplifySignIn\n        headerText=\"Sign in to awesome app\"\n        usernameAlias=\"email\"\n        slot=\"sign-in\"\n      >\n        <div slot=\"amplify-form-section-header\"></div>\n        {/* Remove Create Acount  option */}\n        {/* <div slot=\"secondary-footer-content\"></div> */}\n      </AmplifySignIn>\n\n      <AmplifySignUp\n        slot=\"sign-up\"\n        usernameAlias=\"email\"\n        formFields={[\n          {\n            label: \"Email\",\n            placeholder: \"Email\",\n            required: true,\n            type: \"email\",\n          },\n          {\n            label: \"Password\",\n            placeholder: \"Password\",\n            required: true,\n            type: \"password\",\n          },\n        ]}\n      />\n      {signedIn && <Dashboard />}\n    </AmplifyAuthenticator>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const awsExports = {\n  aws_cognito_region: process.env.REACT_APP_AWS_COGNITO_REGION,\n  aws_user_pools_id: process.env.REACT_APP_AWS_USER_POOLS_ID,\n  aws_user_pools_web_client_id:\n    process.env.REACT_APP_AWS_USER_POOLS_WEB_CLIENT_ID,\n  // Enable below to add sign in with AWS Federation\n  // federationTarget: 'COGNITO_USER_POOLS',\n  // oauth: {\n  //   domain: '',\n  //   redirectSignIn: 'http://localhost:3000',\n  //   redirectSignOut: 'http://localhost:3000/logout',\n  //   responseType: 'code',\n  //   scope: ['phone', 'email', 'openid', 'profile']\n  // }\n};\n\nexport default awsExports;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport awsExports from \"./config/awsExports\";\nimport Amplify from \"aws-amplify\";\n\n// Configure AWS configurations\nAmplify.configure(awsExports);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}